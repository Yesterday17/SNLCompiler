use std::collections::HashMap;
use snl_utils::token::{TokenType, Token};
use std::str::FromStr;
use crate::predict::PredictValue::{NonTerminal, Terminal};
use snl_utils::token::TokenType::*;

pub enum PredictValue {
    Terminal(TokenType),
    NonTerminal(&'static str),
}

struct PredictTable {
    inner: HashMap<(&'static str, TokenType), Vec<PredictValue>>,
}

impl Default for PredictTable {
    fn default() -> Self {
        let mut result = Self { inner: Default::default() };
        result.inner.insert(("Program", Program), vec![NonTerminal("ProgramHead"), NonTerminal("DeclarePart"), NonTerminal("ProgramBody")]);
        result.inner.insert(("ProgramHead", Program), vec![Terminal(Program), NonTerminal("ProgramName")]);
        result.inner.insert(("ProgramName", Identifer), vec![Terminal(Identifer)]);
        result.inner.insert(("DeclarePart", Type), vec![NonTerminal("TypeDec"), NonTerminal("VarDec"), NonTerminal("ProcDec")]);
        result.inner.insert(("DeclarePart", Var), vec![NonTerminal("TypeDec"), NonTerminal("VarDec"), NonTerminal("ProcDec")]);
        result.inner.insert(("DeclarePart", Procedure), vec![NonTerminal("TypeDec"), NonTerminal("VarDec"), NonTerminal("ProcDec")]);
        result.inner.insert(("DeclarePart", Begin), vec![NonTerminal("TypeDec"), NonTerminal("VarDec"), NonTerminal("ProcDec")]);
        result.inner.insert(("TypeDec", Type), vec![NonTerminal("TypeDeclaration")]);
        result.inner.insert(("TypeDec", Var), vec![]);
        result.inner.insert(("TypeDec", Procedure), vec![]);
        result.inner.insert(("TypeDec", Begin), vec![]);
        result.inner.insert(("TypeDeclaration", Type), vec![Terminal(Type), NonTerminal("TypeDecList")]);
        result.inner.insert(("TypeDecList", Identifer), vec![NonTerminal("TypeId"), Terminal(Equal), NonTerminal("TypeName"), Terminal(Semicolon), NonTerminal("TypeDecListMore")]);
        result.inner.insert(("TypeDecListMore", Identifer), vec![NonTerminal("TypeDecList")]);
        result.inner.insert(("TypeDecListMore", Var), vec![]);
        result.inner.insert(("TypeDecListMore", Procedure), vec![]);
        result.inner.insert(("TypeDecListMore", Begin), vec![]);
        result.inner.insert(("TypeId", Identifer), vec![Terminal(Identifer)]);
        result.inner.insert(("TypeName", Identifer), vec![Terminal(Identifer)]);
        result.inner.insert(("TypeName", Integer), vec![NonTerminal("BaseType")]);
        result.inner.insert(("TypeName", Char), vec![NonTerminal("BaseType")]);
        result.inner.insert(("TypeName", Array), vec![NonTerminal("StructureType")]);
        result.inner.insert(("TypeName", Record), vec![NonTerminal("StructureType")]);
        result.inner.insert(("BaseType", Integer), vec![Terminal(Integer)]);
        result.inner.insert(("BaseType", Char), vec![Terminal(Char)]);
        result.inner.insert(("StructureType", Array), vec![NonTerminal("ArrayType")]);
        result.inner.insert(("StructureType", Record), vec![NonTerminal("RecordType")]);
        result.inner.insert(("ArrayType", Array), vec![Terminal(Array), Terminal(SquareBracketOpen), NonTerminal("Low"), Terminal(DotDot), NonTerminal("Top"), Terminal(SquareBracketClose), Terminal(Of), NonTerminal("BaseType")]);
        result.inner.insert(("Low", Int), vec![Terminal(Int)]);
        result.inner.insert(("Top", Int), vec![Terminal(Int)]);
        result.inner.insert(("RecordType", Record), vec![Terminal(Record), NonTerminal("FieldDecList"), Terminal(End)]);
        result.inner.insert(("FieldDecList", Integer), vec![NonTerminal("FieldDecType"), NonTerminal("IdentifierList"), Terminal(Identifer), Terminal(Semicolon), NonTerminal("FieldDecListMore")]);
        result.inner.insert(("FieldDecList", Char), vec![NonTerminal("FieldDecType"), NonTerminal("IdentifierList"), Terminal(Identifer), Terminal(Semicolon), NonTerminal("FieldDecListMore")]);
        result.inner.insert(("FieldDecList", Array), vec![NonTerminal("FieldDecType"), NonTerminal("IdentifierList"), Terminal(Identifer), Terminal(Semicolon), NonTerminal("FieldDecListMore")]);
        result.inner.insert(("FieldDecListMore", Integer), vec![NonTerminal("FieldDecList")]);
        result.inner.insert(("FieldDecListMore", Char), vec![NonTerminal("FieldDecList")]);
        result.inner.insert(("FieldDecListMore", Array), vec![NonTerminal("FieldDecList")]);
        result.inner.insert(("FieldDecListMore", End), vec![]);
        result.inner.insert(("FieldDecType", Integer), vec![NonTerminal("BaseType")]);
        result.inner.insert(("FieldDecType", Char), vec![NonTerminal("BaseType")]);
        result.inner.insert(("FieldDecType", Array), vec![NonTerminal("BaseType")]);
        result.inner.insert(("IdentifierList", Identifer), vec![Terminal(Identifer), NonTerminal("IdentifierListMore")]);
        result.inner.insert(("IdentifierListMore", Semicolon), vec![]);
        result.inner.insert(("IdentifierListMore", Comma), vec![Terminal(Comma), Terminal(Identifer), NonTerminal("IdentifierListMore")]);
        result.inner.insert(("VarDec", Var), vec![NonTerminal("VarDeclaration")]);
        result.inner.insert(("VarDec", Procedure), vec![]);
        result.inner.insert(("VarDec", Begin), vec![]);
        result.inner.insert(("VarDeclaration", Var), vec![Terminal(Var), NonTerminal("VarDecList")]);
        result.inner.insert(("VarDecList", Identifer), vec![NonTerminal("TypeName"), NonTerminal("IdentifierList"), Terminal(Semicolon), NonTerminal("VarDecListMore")]);
        result.inner.insert(("VarDecList", Integer), vec![NonTerminal("TypeName"), NonTerminal("IdentifierList"), Terminal(Semicolon), NonTerminal("VarDecListMore")]);
        result.inner.insert(("VarDecList", Char), vec![NonTerminal("TypeName"), NonTerminal("IdentifierList"), Terminal(Semicolon), NonTerminal("VarDecListMore")]);
        result.inner.insert(("VarDecList", Array), vec![NonTerminal("TypeName"), NonTerminal("IdentifierList"), Terminal(Semicolon), NonTerminal("VarDecListMore")]);
        result.inner.insert(("VarDecList", Record), vec![NonTerminal("TypeName"), NonTerminal("IdentifierList"), Terminal(Semicolon), NonTerminal("VarDecListMore")]);
        result.inner.insert(("VarDecListMore", Identifer), vec![NonTerminal("VarDecList")]);
        result.inner.insert(("VarDecListMore", Integer), vec![NonTerminal("VarDecList")]);
        result.inner.insert(("VarDecListMore", Char), vec![NonTerminal("VarDecList")]);
        result.inner.insert(("VarDecListMore", Array), vec![NonTerminal("VarDecList")]);
        result.inner.insert(("VarDecListMore", Record), vec![NonTerminal("VarDecList")]);
        result.inner.insert(("VarDecListMore", Procedure), vec![]);
        result.inner.insert(("VarDecListMore", Begin), vec![]);
        result.inner.insert(("ProcDec", Procedure), vec![NonTerminal("ProcDeclaration")]);
        result.inner.insert(("ProcDec", Begin), vec![NonTerminal("ProcDeclaration")]);
        result.inner.insert(("ProcDeclaration", Procedure), vec![Terminal(Procedure), NonTerminal("ProcName"), Terminal(BracketOpen), NonTerminal("ParamList"), Terminal(BracketClose), Terminal(Semicolon), NonTerminal("ProcDecPart"), NonTerminal("ProcBody"), NonTerminal("ProcDeclaration")]);
        result.inner.insert(("ProcDeclaration", Begin), vec![]);
        result.inner.insert(("ProcName", Identifer), vec![Terminal(Identifer)]);
        result.inner.insert(("ParamList", Identifer), vec![NonTerminal("Param"), NonTerminal("ParamListMore")]);
        result.inner.insert(("ParamList", Integer), vec![NonTerminal("Param"), NonTerminal("ParamListMore")]);
        result.inner.insert(("ParamList", Char), vec![NonTerminal("Param"), NonTerminal("ParamListMore")]);
        result.inner.insert(("ParamList", Array), vec![NonTerminal("Param"), NonTerminal("ParamListMore")]);
        result.inner.insert(("ParamList", Record), vec![NonTerminal("Param"), NonTerminal("ParamListMore")]);
        result.inner.insert(("ParamList", Var), vec![NonTerminal("Param"), NonTerminal("ParamListMore")]);
        result.inner.insert(("ParamListMore", Semicolon), vec![Terminal(Semicolon), NonTerminal("Param"), NonTerminal("ParamListMore")]);
        result.inner.insert(("Param", Identifer), vec![NonTerminal("TypeName"), NonTerminal("IdentifierList")]);
        result.inner.insert(("Param", Integer), vec![NonTerminal("TypeName"), NonTerminal("IdentifierList")]);
        result.inner.insert(("Param", Char), vec![NonTerminal("TypeName"), NonTerminal("IdentifierList")]);
        result.inner.insert(("Param", Array), vec![NonTerminal("TypeName"), NonTerminal("IdentifierList")]);
        result.inner.insert(("Param", Record), vec![NonTerminal("TypeName"), NonTerminal("IdentifierList")]);
        result.inner.insert(("Param", Var), vec![Terminal(Var), NonTerminal("TypeName"), NonTerminal("IdentifierList")]);
        result.inner.insert(("ProcDecPart", Type), vec![NonTerminal("DeclarePart")]);
        result.inner.insert(("ProcDecPart", Var), vec![NonTerminal("DeclarePart")]);
        result.inner.insert(("ProcDecPart", Procedure), vec![NonTerminal("DeclarePart")]);
        result.inner.insert(("ProcDecPart", Begin), vec![NonTerminal("DeclarePart")]);
        result.inner.insert(("ProcBody", Begin), vec![NonTerminal("ProgramBody")]);
        result.inner.insert(("ProgramBody", Begin), vec![Terminal(Begin), NonTerminal("StatementList"), Terminal(End)]);
        result.inner.insert(("StatementList", Identifer), vec![NonTerminal("Statement"), NonTerminal("MoreStatement")]);
        result.inner.insert(("StatementList", If), vec![NonTerminal("Statement"), NonTerminal("MoreStatement")]);
        result.inner.insert(("StatementList", While), vec![NonTerminal("Statement"), NonTerminal("MoreStatement")]);
        result.inner.insert(("StatementList", Read), vec![NonTerminal("Statement"), NonTerminal("MoreStatement")]);
        result.inner.insert(("StatementList", Write), vec![NonTerminal("Statement"), NonTerminal("MoreStatement")]);
        result.inner.insert(("StatementList", Return), vec![NonTerminal("Statement"), NonTerminal("MoreStatement")]);
        result.inner.insert(("MoreStatement", Semicolon), vec![Terminal(Semicolon), NonTerminal("Statement"), NonTerminal("MoreStatement")]);
        result.inner.insert(("MoreStatement", End), vec![]);
        result.inner.insert(("MoreStatement", Else), vec![]);
        result.inner.insert(("MoreStatement", Fi), vec![]);
        result.inner.insert(("MoreStatement", EndWhile), vec![]);
        result.inner.insert(("Statement", Identifer), vec![Terminal(Identifer), NonTerminal("AssCall")]);
        result.inner.insert(("Statement", If), vec![NonTerminal("ConditionalStatement")]);
        result.inner.insert(("Statement", While), vec![NonTerminal("LoopStatement")]);
        result.inner.insert(("Statement", Read), vec![NonTerminal("InputStatement")]);
        result.inner.insert(("Statement", Write), vec![NonTerminal("OutputStatement")]);
        result.inner.insert(("Statement", Return), vec![NonTerminal("ReturnStatement")]);
        result.inner.insert(("AssCall", Semicolon), vec![NonTerminal("AssignmentRest")]);
        result.inner.insert(("AssCall", SquareBracketOpen), vec![NonTerminal("AssignmentRest")]);
        result.inner.insert(("AssCall", End), vec![NonTerminal("AssignmentRest")]);
        result.inner.insert(("AssCall", BracketOpen), vec![NonTerminal("CallStatementRest")]);
        result.inner.insert(("AssCall", Assign), vec![NonTerminal("AssignmentRest")]);
        result.inner.insert(("AssCall", Else), vec![NonTerminal("AssignmentRest")]);
        result.inner.insert(("AssCall", Fi), vec![NonTerminal("AssignmentRest")]);
        result.inner.insert(("AssCall", EndWhile), vec![NonTerminal("AssignmentRest")]);
        result.inner.insert(("AssCall", Dot), vec![NonTerminal("AssignmentRest")]);
        result.inner.insert(("AssignmentRest", Semicolon), vec![NonTerminal("VariableVisit"), Terminal(Assign), NonTerminal("Exp")]);
        result.inner.insert(("AssignmentRest", SquareBracketOpen), vec![NonTerminal("VariableVisit"), Terminal(Assign), NonTerminal("Exp")]);
        result.inner.insert(("AssignmentRest", End), vec![NonTerminal("VariableVisit"), Terminal(Assign), NonTerminal("Exp")]);
        result.inner.insert(("AssignmentRest", Assign), vec![NonTerminal("VariableVisit"), Terminal(Assign), NonTerminal("Exp")]);
        result.inner.insert(("AssignmentRest", Else), vec![NonTerminal("VariableVisit"), Terminal(Assign), NonTerminal("Exp")]);
        result.inner.insert(("AssignmentRest", Fi), vec![NonTerminal("VariableVisit"), Terminal(Assign), NonTerminal("Exp")]);
        result.inner.insert(("AssignmentRest", EndWhile), vec![NonTerminal("VariableVisit"), Terminal(Assign), NonTerminal("Exp")]);
        result.inner.insert(("AssignmentRest", Dot), vec![NonTerminal("VariableVisit"), Terminal(Assign), NonTerminal("Exp")]);
        result.inner.insert(("ConditionalStatement", Program), vec![Terminal(If), NonTerminal("RelExp"), Terminal(Then), NonTerminal("StatementList"), Terminal(Else), NonTerminal("StatementList"), Terminal(Fi)]);
        result.inner.insert(("LoopStatement", While), vec![Terminal(While), NonTerminal("RelExp"), Terminal(Do), NonTerminal("StatementList"), Terminal(EndWhile)]);
        result.inner.insert(("InputStatement", Read), vec![Terminal(Read), Terminal(BracketOpen), Terminal(Identifer), Terminal(BracketClose)]);
        result.inner.insert(("OutputStatement", Write), vec![Terminal(Write), Terminal(BracketOpen), NonTerminal("Exp"), Terminal(BracketClose)]);
        result.inner.insert(("ReturnStatement", Return), vec![Terminal(Return), Terminal(BracketOpen), NonTerminal("Exp"), Terminal(BracketClose)]);
        result.inner.insert(("CallStatementRest", BracketOpen), vec![Terminal(BracketOpen), NonTerminal("CallStatementRestExp"), Terminal(BracketClose)]);
        result.inner.insert(("CallStatementRestExp", Identifer), vec![NonTerminal("Exp"), NonTerminal("CommaExp")]);
        result.inner.insert(("CallStatementRestExp", Int), vec![NonTerminal("Exp"), NonTerminal("CommaExp")]);
        result.inner.insert(("CallStatementRestExp", BracketOpen), vec![NonTerminal("Exp"), NonTerminal("CommaExp")]);
        result.inner.insert(("CallStatementRestExp", BracketClose), vec![]);
        result.inner.insert(("CommaExp", Comma), vec![Terminal(Comma), NonTerminal("Exp"), NonTerminal("CommaExp")]);
        result.inner.insert(("CommaExp", BracketClose), vec![]);
        result.inner.insert(("RelExp", Identifer), vec![NonTerminal("Exp"), NonTerminal("CmdOp"), NonTerminal("Exp")]);
        result.inner.insert(("RelExp", Int), vec![NonTerminal("Exp"), NonTerminal("CmdOp"), NonTerminal("Exp")]);
        result.inner.insert(("RelExp", BracketOpen), vec![NonTerminal("Exp"), NonTerminal("CmdOp"), NonTerminal("Exp")]);
        result.inner.insert(("Exp", Identifer), vec![NonTerminal("Term"), NonTerminal("ExpPostFix")]);
        result.inner.insert(("Exp", Int), vec![NonTerminal("Term"), NonTerminal("ExpPostFix")]);
        result.inner.insert(("Exp", BracketOpen), vec![NonTerminal("Term"), NonTerminal("ExpPostFix")]);
        result.inner.insert(("ExpPostFix", Equal), vec![]);
        result.inner.insert(("ExpPostFix", Semicolon), vec![]);
        result.inner.insert(("ExpPostFix", SquareBracketClose), vec![]);
        result.inner.insert(("ExpPostFix", End), vec![]);
        result.inner.insert(("ExpPostFix", Comma), vec![]);
        result.inner.insert(("ExpPostFix", BracketClose), vec![]);
        result.inner.insert(("ExpPostFix", Then), vec![]);
        result.inner.insert(("ExpPostFix", Else), vec![]);
        result.inner.insert(("ExpPostFix", Fi), vec![]);
        result.inner.insert(("ExpPostFix", Do), vec![]);
        result.inner.insert(("ExpPostFix", EndWhile), vec![]);
        result.inner.insert(("ExpPostFix", LessThan), vec![]);
        result.inner.insert(("ExpPostFix", Add), vec![NonTerminal("AddOp"), NonTerminal("Exp")]);
        result.inner.insert(("ExpPostFix", Minus), vec![NonTerminal("AddOp"), NonTerminal("Exp")]);
        result.inner.insert(("Term", Identifer), vec![NonTerminal("Factor"), NonTerminal("TermPostFix")]);
        result.inner.insert(("Term", Int), vec![NonTerminal("Factor"), NonTerminal("TermPostFix")]);
        result.inner.insert(("Term", BracketOpen), vec![NonTerminal("Factor"), NonTerminal("TermPostFix")]);
        result.inner.insert(("TermPostFix", Equal), vec![]);
        result.inner.insert(("TermPostFix", Semicolon), vec![]);
        result.inner.insert(("TermPostFix", SquareBracketClose), vec![]);
        result.inner.insert(("TermPostFix", End), vec![]);
        result.inner.insert(("TermPostFix", Comma), vec![]);
        result.inner.insert(("TermPostFix", BracketClose), vec![]);
        result.inner.insert(("TermPostFix", Then), vec![]);
        result.inner.insert(("TermPostFix", Else), vec![]);
        result.inner.insert(("TermPostFix", Fi), vec![]);
        result.inner.insert(("TermPostFix", Do), vec![]);
        result.inner.insert(("TermPostFix", EndWhile), vec![]);
        result.inner.insert(("TermPostFix", LessThan), vec![]);
        result.inner.insert(("TermPostFix", Add), vec![]);
        result.inner.insert(("TermPostFix", Minus), vec![]);
        result.inner.insert(("TermPostFix", Multiply), vec![NonTerminal("MultOp"), NonTerminal("Term")]);
        result.inner.insert(("TermPostFix", Divide), vec![NonTerminal("MultOp"), NonTerminal("Term")]);
        result.inner.insert(("Factor", Identifer), vec![NonTerminal("Variable")]);
        result.inner.insert(("Factor", Int), vec![Terminal(Int)]);
        result.inner.insert(("Factor", BracketOpen), vec![Terminal(BracketOpen), NonTerminal("Exp"), Terminal(BracketClose)]);
        result.inner.insert(("Variable", Identifer), vec![Terminal(Identifer), NonTerminal("VariableVisit")]);
        result.inner.insert(("VariableVisit", Equal), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", Semicolon), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", SquareBracketOpen), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", SquareBracketClose), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", End), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", Comma), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", BracketClose), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", Assign), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", Then), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", Else), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", Fi), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", Do), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", EndWhile), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", Dot), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", LessThan), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", Add), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", Minus), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", Multiply), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisit", Divide), vec![NonTerminal("VariableVisitField"), NonTerminal("VariableVisitIndex")]);
        result.inner.insert(("VariableVisitField", Equal), vec![]);
        result.inner.insert(("VariableVisitField", Semicolon), vec![]);
        result.inner.insert(("VariableVisitField", SquareBracketOpen), vec![]);
        result.inner.insert(("VariableVisitField", SquareBracketClose), vec![]);
        result.inner.insert(("VariableVisitField", End), vec![]);
        result.inner.insert(("VariableVisitField", Comma), vec![]);
        result.inner.insert(("VariableVisitField", BracketClose), vec![]);
        result.inner.insert(("VariableVisitField", Assign), vec![]);
        result.inner.insert(("VariableVisitField", Then), vec![]);
        result.inner.insert(("VariableVisitField", Else), vec![]);
        result.inner.insert(("VariableVisitField", Fi), vec![]);
        result.inner.insert(("VariableVisitField", Do), vec![]);
        result.inner.insert(("VariableVisitField", EndWhile), vec![]);
        result.inner.insert(("VariableVisitField", Dot), vec![Terminal(Dot), Terminal(Identifer)]);
        result.inner.insert(("VariableVisitField", LessThan), vec![]);
        result.inner.insert(("VariableVisitField", Add), vec![]);
        result.inner.insert(("VariableVisitField", Minus), vec![]);
        result.inner.insert(("VariableVisitField", Multiply), vec![]);
        result.inner.insert(("VariableVisitField", Divide), vec![]);
        result.inner.insert(("VariableVisitIndex", Equal), vec![]);
        result.inner.insert(("VariableVisitIndex", Semicolon), vec![]);
        result.inner.insert(("VariableVisitIndex", SquareBracketOpen), vec![Terminal(SquareBracketOpen), NonTerminal("Exp"), Terminal(SquareBracketClose)]);
        result.inner.insert(("VariableVisitIndex", SquareBracketClose), vec![]);
        result.inner.insert(("VariableVisitIndex", End), vec![]);
        result.inner.insert(("VariableVisitIndex", Comma), vec![]);
        result.inner.insert(("VariableVisitIndex", BracketClose), vec![]);
        result.inner.insert(("VariableVisitIndex", Assign), vec![]);
        result.inner.insert(("VariableVisitIndex", Then), vec![]);
        result.inner.insert(("VariableVisitIndex", Else), vec![]);
        result.inner.insert(("VariableVisitIndex", Fi), vec![]);
        result.inner.insert(("VariableVisitIndex", Do), vec![]);
        result.inner.insert(("VariableVisitIndex", EndWhile), vec![]);
        result.inner.insert(("VariableVisitIndex", Dot), vec![Terminal(Dot), Terminal(Identifer)]);
        result.inner.insert(("VariableVisitIndex", LessThan), vec![]);
        result.inner.insert(("VariableVisitIndex", Add), vec![]);
        result.inner.insert(("VariableVisitIndex", Minus), vec![]);
        result.inner.insert(("VariableVisitIndex", Multiply), vec![]);
        result.inner.insert(("VariableVisitIndex", Divide), vec![]);
        result.inner.insert(("CmdOp", Equal), vec![Terminal(Equal)]);
        result.inner.insert(("CmdOp", LessThan), vec![Terminal(LessThan)]);
        result.inner.insert(("AddOp", Add), vec![Terminal(Add)]);
        result.inner.insert(("AddOp", Minus), vec![Terminal(Minus)]);
        result.inner.insert(("MultOp", Multiply), vec![Terminal(Multiply)]);
        result.inner.insert(("MultOp", Divide), vec![Terminal(Divide)]);
        result
    }
}